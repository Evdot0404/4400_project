def WIN_transit_his():
    db = DB()
    command = "SELECT date,transitroute,transittype,price FROM take JOIN transit on  take.transitroute =  transit.route WHERE username='" + username_login[0] +"'"
    table_raw = db.search(command)
    # print(table_raw)

    table_list = []
    for row in table_raw:
        table_list.append(row)
    # print(table_list)
    sitenames = {}
    routes = set(x[1] for x in table_list)
    for route in routes:
        command = "SELECT transitroute,sitename FROM connect WHERE transitroute='" + route + "'"
        info = db.search(command)
        for site in info:
            if route not in sitenames:
                sitenames[route] = [site[1]]
            else:
                sitenames[route].append(site[1])
    sites = []
    for i in range(len(table_list)):
        table_list[i] = [table_list[i][0],table_list[i][1],table_list[i][2],table_list[i][3],sitenames[table_list[i][1]]]

    for value,item in sitenames.items():
        for element in item:
            if element not in sites:
                sites.append(element)
    # for item from table_list:pass
    print(table_list)
    isreversed = [0]
    filtered_list = table_list[:]
    selectitem = {}
           
    window = Tk()
    window.title("User Transit History")
    window.geometry('500x500')
    window.resizable(0, 0)
    window.configure(background="#fff")

    def sorting(arg):
        if arg == 'route':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                route_list = sorted(filtered_list, key = lambda x: x[0])
                isreversed[0] += 1
            else:
                route_list = sorted(filtered_list, key = lambda x: x[0],reverse=True)
                isreversed[0] += 1
            for item in route_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        elif arg == 'ttype':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                ttype_list = sorted(filtered_list, key = lambda x: x[1])
                isreversed[0] += 1
            else:
                ttype_list = sorted(filtered_list, key = lambda x: x[1],reverse=True)
                isreversed[0] += 1
            for item in ttype_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        elif arg == 'price':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                price_list = sorted(filtered_list, key = lambda x: x[2])
                isreversed[0] += 1
            else:
                price_list = sorted(filtered_list, key = lambda x: x[2],reverse=True)
                isreversed[0] += 1
            for item in price_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        elif arg == 'csites':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                csites_list = sorted(filtered_list, key = lambda x: x[3])
                isreversed[0] += 1
            else:
                csites_list = sorted(filtered_list, key = lambda x: x[3],reverse=True)
                isreversed[0] += 1
            for item in csites_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))

    def checkstartdate():
        if not re.match(r'[0-9]{4}-[0-9]{2}-[0-9]{2}',e4_content.get()):
            tkinter.messagebox.showwarning('Date Error','Not valid Start date!')            
        else:
            return e4_content.get()

    def checkenddate():
        if not re.match(r'[0-9]{4}-[0-9]{2}-[0-9]{2}',e5_content.get()):
            tkinter.messagebox.showwarning('Date Error','Not valid End date!')            
        else:
            return  e5_content.get()

    def filter():
        route = e3_content.get()
        if e4_content.get() != '' and e5_content.get() != '' and e3_content.get() != '':
            startdate = checkstartdate()
            enddate = checkenddate()
            startdate_date = datetime.date(int(startdate.split("-")[0]),int(startdate.split("-")[1]),int(startdate.split("-")[2]))
            enddate_date = datetime.date(int(enddate.split("-")[0]),int(enddate.split("-")[1]),int(enddate.split("-")[2]))
            if startdate > enddate:
                tkinter.messagebox.showwarning('Date Error','Start Date should be before End date!') 
            else:
                filtered_list.clear()
                for item in table_list:      
                    if route in item[1] and startdate_date <= item[0] and enddate_date >= item[0]:
                        filtered_list.append(item)
                tree.delete(*tree.get_children())
                for item in filtered_list:
                    tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        elif e4_content.get() != '' and e5_content.get() != '' and e3_content.get() == '':
            startdate = checkstartdate()
            enddate = checkenddate()
            if startdate > enddate:
                tkinter.messagebox.showwarning('Date Error','Start Date should be before End date!') 
            else:
                filtered_list.clear()
                for item in table_list:      
                    if startdate_date <= item[0] and enddate_date >= item[0]:
                        filtered_list.append(item)
                tree.delete(*tree.get_children())
                for item in filtered_list:
                    tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        elif e4_content.get() == '' and e5_content.get() == '' and e3_content.get() != '':
            filtered_list.clear()
            for item in table_list:
                if route in item[1]:
                    filtered_list.append(item)
            tree.delete(*tree.get_children())
            for item in filtered_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        else:pass

    def filtersite(event):
        filtered_list = table_list[:]
        sitename = event.widget.get()
        if sitename == '--ALL--':
            filtered_list = table_list[:]
            tree.delete(*tree.get_children())
            for item in table_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        else:
            filtered_list.clear()
            for item in table_list:
                if sitename in item[4]:
                    filtered_list.append(item)
            tree.delete(*tree.get_children())
            for item in filtered_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))     
    
    def filtertype(event):
        filtered_list = table_list[:]
        ttype = event.widget.get()
        if ttype == '--ALL--':
            filtered_list.clear()
            filtered_list = table_list[:]
            tree.delete(*tree.get_children())
            for item in table_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
        else:
            filtered_list.clear()
            for item in table_list:
                if ttype in item[2]:
                    filtered_list.append(item)
            tree.delete(*tree.get_children())
            for item in filtered_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))
      
    def back():
        if transit_his[0] == 'user':
            window.destroy()
            WIN_FUN_user()
        elif transit_his[0] == 'adm':
            window.destroy() 
            WIN_FUN_adm()           
        elif transit_his[0] == 'admuser':
            window.destroy()
            WIN_FUN_adm_and_vis()
        elif transit_his[0]== 'man':
            window.destroy()
            WIN_FUN_man()
        elif transit_his[0] == 'manuser':
            window.destroy()
            WIN_FUN_man_and_vis()
        elif transit_his[0] == 'sta':
            window.destroy()
            WIN_FUN_sta()
        elif transit_his[0] == 'stauser':
            window.destroy()
            WIN_FUN_sta_and_vis()
        elif transit_his[0] == 'vis':
            window.destroy()
            WIN_FUN_vis()
        else: pass
        
    l0 = Label(window,text="Transit History", width=36,font=('Arial', 18, 'bold'))
    l0.pack(side='top')

    l1 = Label(window,text="Contain Site", font=('Times', 14, 'normal'))
    l1.place(x=25,y=60)

    l2 = Label(window,text="Transport Type", font=('Times', 14, 'normal'))
    l2.place(x=250,y=60)

    l3 = Label(window,text="Route", font=('Times', 14, 'normal'))
    l3.place(x=25,y=100)

    l4 = Label(window,text="Start Date", font=('Times', 14, 'normal'))
    l4.place(x=150,y=100)

    l5 = Label(window,text="End Date", font=('Times', 14, 'normal'))
    l5.place(x=300,y=100)

    e3_content = StringVar()
    e3 = Entry(window,width=6, bg='powder blue',textvariable=e3_content)
    e3.place(x=75,y=100)

    e4_content = StringVar()
    e4 = Entry(window,width=6, bg='powder blue',textvariable=e4_content)
    e4.place(x=225,y=100)

    e5_content = StringVar()
    e5 = Entry(window,width=6, bg='powder blue',textvariable=e5_content)
    e5.place(x=375,y=100)

    option1 = StringVar()
    o1 = ttk.Combobox(window,width=10, textvariable=option1)
    o1['values'] = tuple(sites)
    o1.bind("<<ComboboxSelected>>",filtersite)
    o1.place(x=125,y=60)
    o1.current(0)

    option2 = StringVar()
    o2 = ttk.Combobox(window,width=8, textvariable=option2)
    o2['values'] = ('--ALL--','MARTA','Bus','Bike') # More states should be involved
    o2.bind("<<ComboboxSelected>>",filtertype)
    o2.place(x=350,y=60)
    o2.current(0)

    b1 = Button(window,text="Filter", width=16, height=2,bg='pink',fg='grey',font=('Arial 9 bold'), command=(lambda: filter()))
    b1.place(x=200,y=150)

    b2 = Button(window,text="Back", width=16, height=2,bg='pink',fg='grey',font=('Arial 9 bold'), command=(lambda: back()))
    b2.place(x=200,y=450)
    
    def selectItem(event):
        item = tree.focus()
        selectitem['values'] = tree.item(item)
        
    tree = ttk.Treeview(window)
    tree.place(x=25,y=200)
    vsb = ttk.Scrollbar(window, orient="vertical", command=tree.yview)
    vsb.place(x=425, y=200, height=240)
    tree["show"] = 'headings'
    tree.configure(yscrollcommand=vsb.set,height=12)
    tree["columns"]=("one","two","three","four")
    tree.column("one", width=100)
    tree.column("two", width=100)
    tree.column("three",width=100)
    tree.column("four",width=100)
    tree.heading("one", text="Date",command=(lambda: sorting("route")))
    tree.heading("two", text="Route",command=(lambda: sorting("ttype")))
    tree.heading("three", text="Transport Type",command=(lambda: sorting("price")))
    tree.heading("four",text="Price($)",command=(lambda: sorting("csites")))
    tree.bind('<ButtonRelease-1>', selectItem)
    for item in table_list:
        tree.insert("",'end',values=(item[0],item[1],item[2],item[3]))

    window.mainloop()
