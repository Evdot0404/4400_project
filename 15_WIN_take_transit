def WIN_take_transit():
    db = DB()
    command = "select route,type,price,sitename from transit join connect on route = transitroute"
    table_raw = db.search(command)
    table = {}
    for row in table_raw:
        if row[0] not in table:
            table[row[0]] = [row[0],row[1],str(row[2]).split("'")[0],[row[3]]]
        else:
            table[row[0]][3].append(row[3])
    table_list = [table[value] for value in table]
    isreversed = [0]
    filtered_list = table_list[:]
    selectitem = {}

    sites = []
    for item in table_list:
        for element in item[3]:
            if element not in sites:
                sites.append(element)

    window = Tk()
    window.title("User Take Transit")
    window.geometry('500x500')
    window.resizable(0, 0)
    window.configure(background="#fff")

    def sorting(arg):
        if arg == 'route':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                route_list = sorted(filtered_list, key = lambda x: x[0])
                isreversed[0] += 1
            else:
                route_list = sorted(filtered_list, key = lambda x: x[0],reverse=True)
                isreversed[0] += 1
            for item in route_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))
        elif arg == 'ttype':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                ttype_list = sorted(filtered_list, key = lambda x: x[1])
                isreversed[0] += 1
            else:
                ttype_list = sorted(filtered_list, key = lambda x: x[1],reverse=True)
                isreversed[0] += 1
            for item in ttype_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))
        elif arg == 'price':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                price_list = sorted(filtered_list, key = lambda x: x[2])
                isreversed[0] += 1
            else:
                price_list = sorted(filtered_list, key = lambda x: x[2],reverse=True)
                isreversed[0] += 1
            for item in price_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))
        elif arg == 'csites':
            tree.delete(*tree.get_children())
            if isreversed[0] % 2 == 0:
                csites_list = sorted(filtered_list, key = lambda x: len(x[3]))
                isreversed[0] += 1
            else:
                csites_list = sorted(filtered_list, key = lambda x: len(x[3]),reverse=True)
                isreversed[0] += 1
            for item in csites_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))

    def filter(table_list):
        start = e1_content.get()
        end = e2_content.get()
        if start != '' and end != '':
            if float(end) < float(start):
                tkinter.messagebox.showwarning('Error','Its not a good price range') 
            else:
                filtered_list.clear()
                for item in table_list:
                    if float(item[2]) >= float(start) and float(item[2]) <= float(end):
                        filtered_list.append(item)
                tree.delete(*tree.get_children())
                for item in filtered_list:
                    tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))

    def filtersite(event):
        filtered_list = table_list[:]
        sitename = event.widget.get()
        if sitename == '--ALL--':
            filtered_list = table_list[:]
            tree.delete(*tree.get_children())
            for item in table_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))
        else:
            filtered_list.clear()
            for item in table_list:
                if sitename in item[3]:
                    filtered_list.append(item)
            tree.delete(*tree.get_children())
            for item in filtered_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))      
    
    def filtertype(event):
        filtered_list = table_list[:]
        ttype = event.widget.get()
        if ttype == '--ALL--':
            filtered_list.clear()
            filtered_list = table_list[:]
            tree.delete(*tree.get_children())
            for item in table_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))
        else:
            filtered_list.clear()
            for item in table_list:
                if ttype in item[1]:
                    filtered_list.append(item)
            tree.delete(*tree.get_children())
            for item in filtered_list:
                tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))
      
    def logtransit():
        if not re.match(r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$',e3_content.get()):
            tkinter.messagebox.showwarning('Date Error','Not valid date!')            
        else:
            if selectitem != {}:
                transitdate = e3_content.get()
                info = selectitem['values']['values']
                command = "SELECT date,transitroute FROM take where username='" + username_login[0] + "'"
                com = db.search(command)
                transitroute = info[0]
                newdate = "date='" + transitdate + "'"
                newroute = "transitroute='" + str(info[0]) + "'"
                newtype = "transittype='" + info[1] + "'"
                newusername = "username='" + username_login[0] + "'"
                if com != None:
                    if (transitdate,transitroute) not in com:
                        try:
                            command =  "INSERT INTO take SET " + newdate + "," + newroute + "," + newtype + "," + newusername
                            db.insert(command)      
                        except:
                            tkinter.messagebox.showwarning('Error','Wrong Date or Selection!') 
                else:
                    try:
                        command =  "INSERT INTO take SET " + newdate + "," + newroute + "," + newtype + "," + newusername
                        db.insert(command)    
                    except:
                        tkinter.messagebox.showwarning('Error','Wrong Date or Selection!') 
        
    def back():
        if take_transit[0] == 'user':
            window.destroy()
            WIN_FUN_user()
        elif take_transit[0] == 'adm':
            window.destroy() 
            WIN_FUN_adm()           
        elif take_transit[0] == 'admuser':
            window.destroy()
            WIN_FUN_adm_and_vis()
        elif take_transit[0] == 'man':
            window.destroy()
            WIN_FUN_man()
        elif take_transit[0] == 'manuser':
            window.destroy()
            WIN_FUN_man_and_vis()
        elif take_transit[0] == 'sta':
            window.destroy()
            WIN_FUN_sta()
        elif take_transit[0] == 'stauser':
            window.destroy()
            WIN_FUN_sta_and_vis()
        elif take_transit[0] == 'vis':
            window.destroy()
            WIN_FUN_vis()
        else: pass

    l0 = Label(window,text="Take Transit", width=36,font=('Arial', 18, 'bold'))
    l0.pack(side='top')

    l1 = Label(window,text="Contain Site", font=('Times', 14, 'normal'))
    l1.place(x=25,y=60)

    l2 = Label(window,text="Transport Type", font=('Times', 14, 'normal'))
    l2.place(x=250,y=60)

    l3 = Label(window,text="Price Range", font=('Times', 14, 'normal'))
    l3.place(x=25,y=100)

    l4 = Label(window,text="--", font=('Times', 14, 'normal'))
    l4.place(x=175,y=100)

    l5 = Label(window,text="Transit Date", font=('Times', 14, 'normal'))
    l5.place(x=160,y=450)

    e1_content = StringVar()
    e1 = Entry(window,width=3, bg='powder blue',textvariable=e1_content)
    e1.place(x=120,y=100)

    e2_content = StringVar()
    e2 = Entry(window,width=3, bg='powder blue',textvariable=e2_content)
    e2.place(x=200,y=100)
    
    e3_content = StringVar()
    e3 = Entry(window,width=8, bg='powder blue',textvariable=e3_content)
    e3.place(x=250,y=450)

    option1 = StringVar()
    o1 = ttk.Combobox(window,width=10, textvariable=option1)
    o1['values'] = tuple(x for x in (['--ALL--'] + list(x for x in sites)))
    o1.place(x=125,y=60)
    o1.bind("<<ComboboxSelected>>",filtersite)
    o1.current(0)
    
    option2 = StringVar()
    o2 = ttk.Combobox(window,width=8, textvariable=option2)
    o2['values'] = ('--ALL--','MARTA','Bus','Bike') # More states should be involved
    o2.place(x=350,y=60)
    o2.bind("<<ComboboxSelected>>",filtertype)
    o2.current(0)

    b1 = Button(window,text="Filter", width=16, height=2,bg='pink',fg='grey',font=('Arial 9 bold'), command=(lambda: filter(table_list)))
    b1.place(x=300,y=100)

    b2 = Button(window,text="Back", width=16, height=2,bg='pink',fg='grey',font=('Arial 9 bold'), command=(lambda: back()))
    b2.place(x=50,y=450)

    b3 = Button(window,text="Log Transit", width=16, height=2,bg='pink',fg='grey',font=('Arial 9 bold'), command=(lambda: logtransit()))
    b3.place(x=350,y=450)
    
    def selectItem(event):
        item = tree.focus()
        selectitem['values'] = tree.item(item)
        
    tree = ttk.Treeview(window)
    tree.place(x=25,y=160)
    vsb = ttk.Scrollbar(window, orient="vertical", command=tree.yview)
    vsb.place(x=425, y=160, height=240)
    tree["show"] = 'headings'
    tree.configure(yscrollcommand=vsb.set,height=12)
    tree["columns"]=("one","two","three","four")
    tree.column("one", width=100)
    tree.column("two", width=100)
    tree.column("three",width=100)
    tree.column("four",width=100)
    tree.heading("one", text="Route",command=(lambda: sorting("route")))
    tree.heading("two", text="Transport Type",command=(lambda: sorting("ttype")))
    tree.heading("three", text="Price($)",command=(lambda: sorting("price")))
    tree.heading("four",text="# Connected Sites",command=(lambda: sorting("csites")))
    tree.bind('<ButtonRelease-1>', selectItem)
    for item in table_list:
        tree.insert("",'end',values=(item[0],item[1],item[2],len(item[3])))

    window.mainloop()
